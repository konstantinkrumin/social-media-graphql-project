{"version":3,"sources":["context/auth.js","components/MenuBar.js","components/Popup.js","components/LikeButton.js","util/graphql.js","components/DeleteButton.js","components/PostCard.js","util/hooks.js","components/PostForm.js","pages/Home.js","pages/Login.js","pages/Register.js","pages/SinglePost.js","util/authRoute.js","App.js","ApolloProvider.js","index.js"],"names":["initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","MenuBar","useContext","pathname","window","location","path","substr","useState","activeItem","setActiveItem","handleItemClick","e","name","Menu","pointing","secondary","size","color","Item","username","active","as","Link","to","position","onClick","Popup","content","children","inverted","trigger","LIKE_POST_MUTATION","gql","LikeButton","post","id","likeCount","likes","liked","setLiked","useEffect","find","like","useMutation","variables","postId","likePost","likeButton","Button","Icon","basic","labelPosition","Label","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","data","readQuery","query","updatedGetPosts","getPosts","filter","p","writeQuery","deletePostOrComment","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","src","Header","Meta","moment","fromNow","Description","extra","useForm","values","setValues","onChange","event","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","error","Form","Field","Input","placeholder","disabled","trim","className","marginBottom","graphQLErrors","message","Home","useQuery","loading","Grid","columns","Row","Column","Transition","Group","map","LOGIN_USER","Login","context","errors","setErrors","loginUser","password","confirmPassword","email","_","history","push","onError","err","extensions","exception","noValidate","label","primary","Object","keys","length","REGISTER_USER","Register","addUser","register","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkup","match","params","commentInputRef","useRef","comment","setComment","current","blur","submitComment","getPost","comments","width","focus","ref","header","AuthRoute","Component","component","rest","render","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.4ad74e16.chunk.js","sourcesContent":["import React, { useReducer, createContext } from 'react';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst initialState = {\r\n  user: null,\r\n};\r\n\r\nif (localStorage.getItem('jwtToken')) {\r\n  const decodedToken = jwtDecode(localStorage.getItem('jwtToken'));\r\n\r\n  if (decodedToken.exp * 1000 < Date.now()) {\r\n    localStorage.removeItem('jwtToken');\r\n  } else {\r\n    initialState.user = decodedToken;\r\n  }\r\n}\r\n\r\nconst AuthContext = createContext({\r\n  user: null,\r\n  login: (userData) => {},\r\n  logout: () => {},\r\n});\r\n\r\nfunction authReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'LOGIN':\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        user: null,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction AuthProvider(props) {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  function login(userData) {\r\n    localStorage.setItem('jwtToken', userData.token);\r\n    dispatch({\r\n      type: 'LOGIN',\r\n      payload: userData,\r\n    });\r\n  }\r\n\r\n  function logout() {\r\n    localStorage.removeItem('jwtToken');\r\n    dispatch({\r\n      type: 'LOGOUT',\r\n    });\r\n  }\r\n\r\n  return <AuthContext.Provider value={{ user: state.user, login, logout }} {...props}></AuthContext.Provider>;\r\n}\r\n\r\nexport { AuthContext, AuthProvider };\r\n","import React, { useContext, useState } from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\nfunction MenuBar() {\r\n  const { user, logout } = useContext(AuthContext);\r\n\r\n  const pathname = window.location.pathname;\r\n  const path = pathname === '/' ? 'home' : pathname.substr(1);\r\n\r\n  const [activeItem, setActiveItem] = useState(path);\r\n\r\n  const handleItemClick = (e, { name }) => setActiveItem(name);\r\n\r\n  const menuBar = user ? (\r\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\r\n      <Menu.Item name={user.username} active as={Link} to=\"/\" />\r\n\r\n      <Menu.Menu position=\"right\">\r\n        <Menu.Item name=\"logout\" onClick={logout} />\r\n      </Menu.Menu>\r\n    </Menu>\r\n  ) : (\r\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\r\n      <Menu.Item name=\"home\" active={activeItem === 'home'} onClick={handleItemClick} as={Link} to=\"/\" />\r\n\r\n      <Menu.Menu position=\"right\">\r\n        <Menu.Item name=\"login\" active={activeItem === 'login'} onClick={handleItemClick} as={Link} to=\"/login\" />\r\n        <Menu.Item name=\"register\" active={activeItem === 'register'} onClick={handleItemClick} as={Link} to=\"/register\" />\r\n      </Menu.Menu>\r\n    </Menu>\r\n  );\r\n\r\n  return menuBar;\r\n}\r\n\r\nexport default MenuBar;\r\n","import React from 'react';\r\nimport { Popup as SemanticPopup } from 'semantic-ui-react';\r\n\r\nconst Popup = ({ content, children }) => {\r\n  return <SemanticPopup inverted content={content} trigger={children} />;\r\n};\r\n\r\nexport default Popup;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Button, Icon, Label } from 'semantic-ui-react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport gql from 'graphql-tag';\r\n\r\nimport Popup from './Popup';\r\n\r\nconst LikeButton = ({ user, post: { id, likeCount, likes } }) => {\r\n  const [liked, setLiked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (user && likes.find((like) => like.username === user.username)) {\r\n      setLiked(true);\r\n    } else {\r\n      setLiked(false);\r\n    }\r\n  });\r\n\r\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n    variables: { postId: id },\r\n  });\r\n\r\n  const likeButton = user ? (\r\n    liked ? (\r\n      <Button color=\"teal\">\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    ) : (\r\n      <Button color=\"teal\" basic>\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    )\r\n  ) : (\r\n    <Button as={Link} to=\"/login\" color=\"teal\" basic>\r\n      <Icon name=\"heart\" />\r\n    </Button>\r\n  );\r\n\r\n  return (\r\n    <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\r\n      <Popup content={liked ? 'Unlike' : 'Like'}>{likeButton}</Popup>\r\n\r\n      <Label basic color=\"teal\" pointing=\"left\">\r\n        {likeCount}\r\n      </Label>\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst LIKE_POST_MUTATION = gql`\r\n  mutation likePost($postId: ID!) {\r\n    likePost(postId: $postId) {\r\n      id\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      likeCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport default LikeButton;\r\n","import gql from 'graphql-tag';\r\n\r\nexport const FETCH_POSTS_QUERY = gql`\r\n  {\r\n    getPosts {\r\n      id\r\n      body\r\n      createdAt\r\n      username\r\n      likeCount\r\n      likes {\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { Button, Confirm, Icon } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\r\nimport Popup from './Popup';\r\n\r\nconst DeleteButton = ({ postId, commentId, callback }) => {\r\n  const [confirmOpen, setConfirmOpen] = useState(false);\r\n\r\n  const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\r\n\r\n  const [deletePostOrComment] = useMutation(mutation, {\r\n    update(proxy) {\r\n      setConfirmOpen(false);\r\n\r\n      if (!commentId) {\r\n        const data = proxy.readQuery({\r\n          query: FETCH_POSTS_QUERY,\r\n        });\r\n\r\n        const updatedGetPosts = data?.getPosts?.filter((p) => p.id !== postId);\r\n        proxy.writeQuery({ query: FETCH_POSTS_QUERY, data: { getPosts: updatedGetPosts } });\r\n      }\r\n\r\n      if (callback) callback();\r\n    },\r\n    variables: {\r\n      postId,\r\n      commentId,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Popup content={commentId ? 'Delete comment' : 'Delete post'}>\r\n        <Button as=\"div\" color=\"red\" floated=\"right\" onClick={() => setConfirmOpen(true)}>\r\n          <Icon name=\"trash\" style={{ margin: 0 }} />\r\n        </Button>\r\n      </Popup>\r\n\r\n      <Confirm open={confirmOpen} onCancel={() => setConfirmOpen(false)} onConfirm={deletePostOrComment} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst DELETE_POST_MUTATION = gql`\r\n  mutation deletePost($postId: ID!) {\r\n    deletePost(postId: $postId)\r\n  }\r\n`;\r\n\r\nconst DELETE_COMMENT_MUTATION = gql`\r\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\r\n    deleteComment(postId: $postId, commentId: $commentId) {\r\n      id\r\n      comments {\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport default DeleteButton;\r\n","import React, { useContext } from 'react';\r\nimport { Button, Card, Icon, Image, Label } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport LikeButton from './LikeButton';\r\nimport DeleteButton from './DeleteButton';\r\nimport Popup from './Popup';\r\n\r\nconst PostCard = ({ post: { body, createdAt, id, username, likeCount, commentCount, likes } }) => {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Card fluid>\r\n      <Card.Content as={Link} to={`/posts/${id}`}>\r\n        <Image floated=\"right\" size=\"mini\" src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\" />\r\n        <Card.Header>{username}</Card.Header>\r\n        <Card.Meta>{moment(createdAt).fromNow(true)}</Card.Meta>\r\n        <Card.Description>{body}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <LikeButton user={user} post={{ id, likes, likeCount }} />\r\n\r\n        <Popup content=\"Comment on post\">\r\n          <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\r\n            <Button color=\"blue\" basic>\r\n              <Icon name=\"comments\" />\r\n            </Button>\r\n            <Label basic color=\"blue\" pointing=\"left\">\r\n              {commentCount}\r\n            </Label>\r\n          </Button>\r\n        </Popup>\r\n\r\n        {user && user.username === username && <DeleteButton postId={id} />}\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PostCard;\r\n","import { useState } from 'react';\r\n\r\nexport const useForm = (callback, initialState = {}) => {\r\n  const [values, setValues] = useState(initialState);\r\n\r\n  const onChange = (event) => {\r\n    setValues({ ...values, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    callback();\r\n  };\r\n\r\n  return { onChange, onSubmit, values };\r\n};\r\n","import React from 'react';\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from '@apollo/client';\r\n\r\nimport { useForm } from '../util/hooks';\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\r\n\r\nconst PostForm = () => {\r\n  const { values, onChange, onSubmit } = useForm(createPostCallback, {\r\n    body: '',\r\n  });\r\n\r\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\r\n    variables: values,\r\n    update(proxy, result) {\r\n      const data = proxy.readQuery({\r\n        query: FETCH_POSTS_QUERY,\r\n      });\r\n      proxy.writeQuery({\r\n        query: FETCH_POSTS_QUERY,\r\n        data: {\r\n          getPosts: [result.data.createPost, ...data.getPosts],\r\n        },\r\n      });\r\n      values.body = '';\r\n    },\r\n  });\r\n\r\n  function createPostCallback() {\r\n    createPost();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={onSubmit}>\r\n        <h2>Create a post:</h2>\r\n        <Form.Field>\r\n          <Form.Input placeholder=\"Hi World!\" name=\"body\" onChange={onChange} value={values.body} error={error ? true : false} />\r\n          <Button disabled={!values.body.trim()} type=\"submit\" color=\"teal\">\r\n            Submit\r\n          </Button>\r\n        </Form.Field>\r\n      </Form>\r\n      {error && (\r\n        <div className=\"ui error message\" style={{ marginBottom: 20 }}>\r\n          <ul className=\"list\">\r\n            <li>{error.graphQLErrors[0].message}</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst CREATE_POST_MUTATION = gql`\r\n  mutation createPost($body: String!) {\r\n    createPost(body: $body) {\r\n      id\r\n      body\r\n      createdAt\r\n      username\r\n      likes {\r\n        id\r\n        username\r\n        createdAt\r\n      }\r\n      likeCount\r\n      comments {\r\n        id\r\n        body\r\n        username\r\n        createdAt\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport default PostForm;\r\n","import React, { useContext } from 'react';\r\nimport { Grid, Transition } from 'semantic-ui-react';\r\nimport { useQuery } from '@apollo/client';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport PostCard from '../components/PostCard';\r\nimport PostForm from '../components/PostForm';\r\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\r\n\r\nconst Home = () => {\r\n  const { user } = useContext(AuthContext);\r\n  const { loading, data } = useQuery(FETCH_POSTS_QUERY);\r\n\r\n  return (\r\n    <Grid columns={3}>\r\n      <Grid.Row className=\"page-title\">\r\n        <h1>Recent Posts</h1>\r\n      </Grid.Row>\r\n      <Grid.Row>\r\n        {user && (\r\n          <Grid.Column>\r\n            <PostForm />\r\n          </Grid.Column>\r\n        )}\r\n        {loading ? (\r\n          <h1>Loading posts...</h1>\r\n        ) : (\r\n          <Transition.Group>\r\n            {data.getPosts &&\r\n              data.getPosts.map((post) => (\r\n                <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\r\n                  <PostCard post={post} />\r\n                </Grid.Column>\r\n              ))}\r\n          </Transition.Group>\r\n        )}\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useContext, useState } from 'react';\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport { useMutation } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport { useForm } from '../util/hooks';\r\n\r\nconst Login = (props) => {\r\n  const context = useContext(AuthContext);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const initialState = {\r\n    username: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    email: '',\r\n  };\r\n\r\n  const { onChange, onSubmit, values } = useForm(loginUserCallback, initialState);\r\n\r\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\r\n    update(_, { data: { login: userData } }) {\r\n      context.login(userData);\r\n      props.history.push('/');\r\n    },\r\n    onError(err) {\r\n      setErrors(err?.graphQLErrors[0]?.extensions?.exception?.errors);\r\n    },\r\n    variables: values,\r\n  });\r\n\r\n  function loginUserCallback() {\r\n    loginUser();\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\r\n        <h1>Login</h1>\r\n        <Form.Input\r\n          label=\"Username\"\r\n          placeholder=\"Username...\"\r\n          name=\"username\"\r\n          type=\"text\"\r\n          value={values.username}\r\n          error={errors.username ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Password\"\r\n          placeholder=\"Password...\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={values.password}\r\n          error={errors.password ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Button type=\"submit\" primary>\r\n          Login\r\n        </Button>\r\n      </Form>\r\n      {Object.keys(errors).length > 0 && (\r\n        <div className=\"ui error message\">\r\n          <ul className=\"list\">\r\n            {Object.values(errors).map((value) => (\r\n              <li key={value}>{value}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst LOGIN_USER = gql`\r\n  mutation login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password) {\r\n      id\r\n      email\r\n      username\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Login;\r\n","import React, { useContext, useState } from 'react';\r\nimport { Button, Form } from 'semantic-ui-react';\r\nimport { useMutation } from '@apollo/client';\r\nimport gql from 'graphql-tag';\r\n\r\nimport { AuthContext } from '../context/auth';\r\nimport { useForm } from '../util/hooks';\r\n\r\nconst Register = (props) => {\r\n  const context = useContext(AuthContext);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const initialState = {\r\n    username: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    email: '',\r\n  };\r\n\r\n  const { onChange, onSubmit, values } = useForm(registerUser, initialState);\r\n\r\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n    update(_, { data: { register: userData } }) {\r\n      context.login(userData);\r\n      props.history.push('/');\r\n    },\r\n    onError(err) {\r\n      setErrors(err?.graphQLErrors[0]?.extensions?.exception?.errors);\r\n    },\r\n    variables: values,\r\n  });\r\n\r\n  function registerUser() {\r\n    addUser();\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\r\n        <h1>Register</h1>\r\n        <Form.Input\r\n          label=\"Username\"\r\n          placeholder=\"Username...\"\r\n          name=\"username\"\r\n          type=\"text\"\r\n          value={values.username}\r\n          error={errors.username ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Email\"\r\n          placeholder=\"Email...\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          value={values.email}\r\n          error={errors.email ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Password\"\r\n          placeholder=\"Password...\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={values.password}\r\n          error={errors.password ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Confirm Password\"\r\n          placeholder=\"Confirm Password...\"\r\n          name=\"confirmPassword\"\r\n          type=\"password\"\r\n          value={values.confirmPassword}\r\n          error={errors.confirmPassword ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Button type=\"submit\" primary>\r\n          Register\r\n        </Button>\r\n      </Form>\r\n      {Object.keys(errors).length > 0 && (\r\n        <div className=\"ui error message\">\r\n          <ul className=\"list\">\r\n            {Object.values(errors).map((value) => (\r\n              <li key={value}>{value}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst REGISTER_USER = gql`\r\n  mutation register($username: String!, $email: String!, $password: String!, $confirmPassword: String!) {\r\n    register(registerInput: { username: $username, email: $email, password: $password, confirmPassword: $confirmPassword }) {\r\n      id\r\n      email\r\n      username\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Register;\r\n","import React, { useState, useContext, useRef } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { Button, Card, Form, Grid, Icon, Image, Label } from 'semantic-ui-react';\r\nimport moment from 'moment';\r\n\r\nimport Popup from '../components/Popup';\r\nimport LikeButton from '../components/LikeButton';\r\nimport DeleteButton from '../components/DeleteButton';\r\nimport { AuthContext } from '../context/auth';\r\n\r\nconst SinglePost = (props) => {\r\n  const postId = props.match.params.postId;\r\n  const { user } = useContext(AuthContext);\r\n  const commentInputRef = useRef(null);\r\n\r\n  const [comment, setComment] = useState('');\r\n\r\n  const { loading, data } = useQuery(FETCH_POST_QUERY, {\r\n    variables: {\r\n      postId,\r\n    },\r\n  });\r\n\r\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\r\n    update() {\r\n      setComment('');\r\n      commentInputRef.current.blur();\r\n    },\r\n    variables: {\r\n      postId,\r\n      body: comment,\r\n    },\r\n  });\r\n\r\n  const deletePostCallback = () => {\r\n    props.history.push('/');\r\n  };\r\n\r\n  let postMarkup;\r\n\r\n  if (loading) {\r\n    postMarkup = <p>Loading post...</p>;\r\n  } else if (!loading) {\r\n    const { id, body, createdAt, username, comments, likes, likeCount, commentCount } = data?.getPost;\r\n\r\n    postMarkup = (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column width={2}>\r\n            <Image floated=\"right\" size=\"small\" src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\" />\r\n          </Grid.Column>\r\n          <Grid.Column width={10}>\r\n            <Card fluid>\r\n              <Card.Content>\r\n                <Card.Header>{username}</Card.Header>\r\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\r\n                <Card.Description>{body}</Card.Description>\r\n              </Card.Content>\r\n              <hr />\r\n              <Card.Content extra>\r\n                <LikeButton user={user} post={{ id, likeCount, likes }} />\r\n                <Popup content=\"Comment on post\">\r\n                  <Button as=\"div\" labelPosition=\"right\" onClick={() => commentInputRef.current.focus()}>\r\n                    <Button basic color=\"blue\">\r\n                      <Icon name=\"comments\" />\r\n                    </Button>\r\n                    <Label basic color=\"blue \" pointing=\"left\">\r\n                      {commentCount}\r\n                    </Label>\r\n                  </Button>\r\n                </Popup>\r\n\r\n                {user && user.username === username && <DeleteButton postId={id} callback={deletePostCallback} />}\r\n              </Card.Content>\r\n            </Card>\r\n            {user && (\r\n              <Card fluid>\r\n                <Card.Content>\r\n                  <p>Post a comment</p>\r\n                  <Form>\r\n                    <div className=\"ui action input fluid\">\r\n                      <input\r\n                        type=\"text\"\r\n                        placeholder=\"Comment...\"\r\n                        name=\"comment\"\r\n                        value={comment}\r\n                        onChange={(event) => setComment(event.target.value)}\r\n                        ref={commentInputRef}\r\n                      />\r\n                      <button type=\"submit\" className=\"ui button teal\" disabled={comment.trim() === ''} onClick={submitComment}>\r\n                        Submit\r\n                      </button>\r\n                    </div>\r\n                  </Form>\r\n                </Card.Content>\r\n              </Card>\r\n            )}\r\n            {comments.map((comment) => (\r\n              <Card fluid key={comment.id}>\r\n                <Card.Content>\r\n                  {user && user.username === comment.username && <DeleteButton postId={id} commentId={comment.id} />}\r\n                  <Card.Header>{comment.header}</Card.Header>\r\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\r\n                  <Card.Description>{comment.body}</Card.Description>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  return postMarkup;\r\n};\r\n\r\nconst SUBMIT_COMMENT_MUTATION = gql`\r\n  mutation ($postId: ID!, $body: String!) {\r\n    createComment(postId: $postId, body: $body) {\r\n      id\r\n      comments {\r\n        id\r\n        body\r\n        createdAt\r\n        username\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nconst FETCH_POST_QUERY = gql`\r\n  query ($postId: ID!) {\r\n    getPost(postId: $postId) {\r\n      id\r\n      body\r\n      createdAt\r\n      username\r\n      likeCount\r\n      likes {\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default SinglePost;\r\n","import React, { useContext } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\nconst AuthRoute = ({ component: Component, ...rest }) => {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return <Route {...rest} render={(props) => (user ? <Redirect to=\"/\" /> : <Component {...props} />)} />;\r\n};\r\n\r\nexport default AuthRoute;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\n\nimport MenuBar from './components/MenuBar';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport SinglePost from './pages/SinglePost';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nimport { AuthProvider } from './context/auth';\nimport AuthRoute from './util/authRoute';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Route exact path=\"/\" component={Home} />\n          <AuthRoute exact path=\"/login\" component={Login} />\n          <AuthRoute exact path=\"/register\" component={Register} />\n          <Route exact path=\"/posts/:postId\" component={SinglePost} />\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport { ApolloClient, ApolloProvider, createHttpLink, InMemoryCache } from '@apollo/client';\r\nimport { setContext } from 'apollo-link-context';\r\n\r\nimport App from './App';\r\n\r\nconst httpLink = createHttpLink({\r\n  // uri: 'http://localhost:5000',\r\n  uri: 'https://social-media-graphql-proj.herokuapp.com/',\r\n});\r\n\r\nconst authLink = setContext(() => {\r\n  const token = localStorage.getItem('jwtToken');\r\n  return {\r\n    headers: {\r\n      Authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nexport default (\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>\r\n);\r\n","import ReactDOM from 'react-dom';\nimport ApolloProvider from './ApolloProvider';\n\nReactDOM.render(ApolloProvider, document.getElementById('root'));\n"],"sourceRoot":""}